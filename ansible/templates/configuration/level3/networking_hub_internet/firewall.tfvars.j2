
{% if gcc_platform | trim == '0' %}
public_ip_addresses = {
  # egress
  firewall_re1 = {
    name                    = "fw-egress-pip1"
    resource_group_key      = "networking_hub_internet_re1"
    sku                     = "Standard"
    allocation_method       = "Static"
    ip_version              = "IPv4"
    idle_timeout_in_minutes = "4"

  }
  # egress
  firewall_mgmt_re1 = {
    name                    = "fw-egress-pip2"
    resource_group_key      = "networking_hub_internet_re1"
    sku                     = "Standard"
    allocation_method       = "Static"
    ip_version              = "IPv4"
    idle_timeout_in_minutes = "4"

  }
  # ingress
  ingress_firewall_re1 = {
    name                    = "fw-ingress-pip1"
    resource_group_key      = "networking_hub_internet_re1"
    sku                     = "Standard"
    allocation_method       = "Static"
    ip_version              = "IPv4"
    idle_timeout_in_minutes = "4"

  }
}

ip_groups = {
  aks_ip_group1 = {
    name               = "aks_ip_group1"
{% if cidr_internet_zone_subnet_app | trim != 'None' %}
    cidrs              = ["{{cidr_internet_zone_subnet_app}}"] # if cidrs is defined all vnet & subnet are ignored
{% else %}
{% if cidr_internet_zone_subnet_web | trim != 'None' %}
    cidrs              = ["{{cidr_internet_zone_subnet_web}}"] # if cidrs is defined all vnet & subnet are ignored
{% else %}
    cidrs              = ["{{cidr_internet_zone_subnet_applicationgateway}}"] # if cidrs is defined all vnet & subnet are ignored
{% endif %}          
{% endif %}

    resource_group_key = "networking_hub_internet_re1"
    # vnet_key = "vnet_aks_re1"
    # subnet_keys = ["aks_nodepool_system","aks_nodepool_user1"]  # can be either unclared or empty, will take vnet cidr instead
  }
  agw_ip_group1 = {
    name               = "agw-ip-group1"
    cidrs              = ["{{cidr_ingress_egress_zone_subnet_ingress_agw_internet}}"] # if cidrs is defined all vnet & subnet are ignored
    resource_group_key = "networking_hub_internet_re1"
    # vnet_key = "vnet_aks_re1"
    # subnet_keys = ["aks_nodepool_system","aks_nodepool_user1"]  # can be either unclared or empty, will take vnet cidr instead
  }  
}

azurerm_firewalls = {
  # egress firewall
  fw_re1 = {
    name  = "egress-internet"
    resource_group_key = "networking_hub_internet_re1" # same resource group as vnet - "networking_hub_internet_re1"
    vnet_key = "vnet_hub_internet_egress_re1"

    # lz_key = "networking_hub_internet"
    # resource_group_key = "networking_hub_internet_re1" # same resource group as vnet - "networking_hub_internet_re1"
    # add the resource group name to resolve the issue of subnet rg different from firewall rg
    # TODO: subnet resource group name - input as variable for code generation
    # ** firewall MUST be in the same resource group as VNet and Subnet AzureFirewallSubnet

    # deploy in the same resource group as vnet
    # resource_group_name = "osscuat-rg-networking-hub-internet-re1-jpf" # this value need to be hardcoded???? the resource group name of the subnet  

    # vnet_key = "vnet_hub_internet_egress_re1"
    # subnet_key = "AzureFirewallSubnet"
    # lz_key = "networking_hub_internet"    
    # subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-egress-internet/subnets/AzureFirewallSubnet"
    sku_tier = "Premium"
    firewall_policy_key = "egress_policy"    

    # public_ip_address_id = can(ip_configuration.value.public_ip_id) ? ip_configuration.value.public_ip_id : 
    # var.public_ip_addresses[try(ip_configuration.value.lz_key, var.client_config.landingzone_key)][ip_configuration.value.public_ip_key].id

    public_ips = {
      ip1 = {
        name = "public-ip"
        public_ip_key = "firewall_re1"
        vnet_key = "vnet_hub_internet_egress_re1"
        subnet_key = "AzureFirewallSubnet_egress" # "AzureFirewallSubnet"
        # lz_key = "networking_hub_internet"

        # ip_configuration = {
        #   public_ip_key = "firewall_re1"
        #   vnet_key = "vnet_hub_internet_egress_re1"
        #   subnet_key = "AzureFirewallSubnet"
        #   lz_key = "networking_hub_internet"

        #   # subnet_id            = try(ip_configuration.value.subnet_id, null) != null ? 
        #   # ip_configuration.value.subnet_id : try(ip_configuration.value.subnet_key, null) != null ? 
        #   # try(ip_configuration.value.lz_key, null) == null ? 
        #   # var.virtual_networks[var.client_config.landingzone_key][ip_configuration.value.vnet_key].subnets[ip_configuration.value.subnet_key].id : 
        #   # var.virtual_networks[ip_configuration.value.lz_key][ip_configuration.value.vnet_key].subnets[ip_configuration.value.subnet_key].id : null
        #   # subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-egress-internet/subnets/AzureFirewallSubnet"
        # }

      }
    }
  


    # management subnet is required for force tunneling
    management_ip_configuration = {
      management_ip_configuration = {
        name = "management-ip"
        public_ip_key = "firewall_mgmt_re1"
        vnet_key = "vnet_hub_internet_egress_re1"
        subnet_key = "AzureFirewallMangementSubnet_egress" # "AzureFirewallManagementSubnet"
        # lz_key = "networking_hub_internet"
        #  subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-egress-internet/subnets/AzureFirewallManagementSubnet"
      }
    }    
  


    # 27 Sep 2022 - add diagnostic_profiles and tags
    tags = { 
      purpose = "ingress networking spoke resource group" # replace with purpose
      project-code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{zone_code}}"
      tier = "{{tier_code}}"           
    } 

    diagnostic_profiles = {
      central_logs_region = {
        definition_key   = "firewall"
        destination_type = "log_analytics"
        destination_key  = "central_logs"
      }
    }


  }

  # ingress firewall
  ingress_fw_re1 = {
    name               = "ingress-internet"
    resource_group_key = "networking_hub_internet_re1"
 
    # add the resource group name to resolve the issue of subnet rg different from firewall rg
    # TODO: subnet resource group name - input as variable for code generation
    # ** firewall MUST be in the same resource group as VNet and Subnet AzureFirewallSubnet

    # resource_group_name = "osscuat-rg-networking-hub-internet-re1 " # the resource group name of the subnet  

    vnet_key = "vnet_hub_internet_ingress_re1"
    # subnet_key = "AzureFirewallSubnet"
    # lz_key = "networking_hub_internet"    
    # subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-ingress-internet/subnets/AzureFirewallSubnet"
    sku_tier = "Premium"
    firewall_policy_key = "ingress_policy"    
    public_ips = {
      ip_configuration = {
        name = "ingress-public-ip"
        public_ip_key = "ingress_firewall_re1"
        vnet_key = "vnet_hub_internet_ingress_re1"
        subnet_key = "AzureFirewallSubnet"
        # lz_key = "networking_hub_internet"
        # subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-ingress-internet/subnets/AzureFirewallSubnet"
      }
    }
  


    # management subnet is required for force tunneling
    #management_ip_configuration = {
    #  management_ip_configuration = {
    #    name = "management-ip"
    #    public_ip_key = "firewall_pip2_re1"
    #    subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-ingress-internet/subnets/AzureFirewallManagementSubnet"
    #  }
    #}    

    # 27 Sep 2022 - add diagnostic_profiles and tags
    tags = { 
      purpose = "ingress networking spoke resource group" # replace with purpose
      project-code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{zone_code}}"
      tier = "{{tier_code}}"             
    } 

    diagnostic_profiles = {
      central_logs_region = {
        definition_key   = "firewall"
        destination_type = "log_analytics"
        destination_key  = "central_logs"
      }
    }
  }

}

{% else %}
#------------------------------------------------------
# this page is leave blank intentionally
#------------------------------------------------------
{% endif %}