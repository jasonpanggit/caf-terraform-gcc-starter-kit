{% if gcc_platform | trim == '1' %}
#------------------------------------------------------
# this page is leave blank intentionally
#------------------------------------------------------
{% else %}
vnets = {

  #    ingress_egress_vnet_name_ingress_internet_cidr: "{{configuration_gcc.ingress_egress_vnet_name_ingress_internet_cidr | trim}}" 
  #    ingress_egress_vnet_name_egress_internet_cidr: "{{configuration_gcc.ingress_egress_vnet_name_egress_internet_cidr | trim}}" 
  #    ingress_egress_vnet_name_ingress_intranet_cidr: "{{configuration_gcc.ingress_egress_vnet_name_ingress_intranet_cidr | trim}}" 
  #    ingress_egress_vnet_name_egress_intranet_cidr: "{{configuration_gcc.ingress_egress_vnet_name_egress_intranet_cidr | trim}}" 
  #    internet_vnet_name_cidr: "{{configuration_gcc.internet_vnet_name_cidr | trim}}" 
  #    management_vnet_name_cidr: "{{configuration_gcc.management_vnet_name_cidr | trim}}" 
  #    devops_vnet_name_cidr: "{{configuration_gcc.devops_vnet_name_cidr | trim}}" 


  # project vnet - internet zone
  vnet_hub_management_re1 = { 
    resource_group_key = "networking_spoke_management_re1"
    region             = "region1"
    vnet = {
      name          = "spoke-management-re1"
      address_space = ["{{management_vnet_name_cidr}}"] # ["100.3.0.0/24"]
    }


    subnets = {

      # begin management zone
      management_infra_subnet = {
        name    = "infra-management"
        cidr    = ["100.3.0.0/26"] # 64 ips 
        nsg_key = "jumpbox"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]    
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
        # }      
      } 

      management_security_subnet = {
        name    = "security-management"
        cidr    = ["100.3.0.64/26"] # 64 ips 
        nsg_key = "jumpbox"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]    
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
        # }      
      }  

      AzureBastionSubnet = {
        name    = "AzureBastionSubnet" # Must be called AzureBastionSubnet
        cidr    = ["100.3.0.128/26"] # 64 ips
        nsg_key = "azure_bastion_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]    
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
        # }      
      }  
      # end management zone
    }


  }

} //vnets
{% endif %}
