{% if gcc_platform | trim == '1' %}
#------------------------------------------------------
# this page is leave blank intentionally
#------------------------------------------------------
{% else %}
vnets = {

  # project vnet - internet zone
  vnet_spoke_internet_re1 = { 
    resource_group_key = "networking_spoke_internet_re1"
    region             = "region1"
    vnet = {
      name          = "spoke-internet-re1"
      address_space = ["{{internet_vnet_name_cidr}}"] # ["100.2.0.0/24"]
    }

    subnets = {

      # private segment
      # aks, private endpoint to app service etc...
      app_internet_subnet = {
        name    = "app-internet"
        cidr    = ["100.2.0.0/27"]
        nsg_key = "app_nsg"
        # route_table_key = "default_to_firewall_re1"    # enable this if route_tables is used
        enforce_private_link_endpoint_network_policies = "true"    
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }    
      }  

      # mssql, storage account etc...
      db_internet_subnet = {
        name    = "db-internet"
        cidr    = ["100.2.0.32/27"]
        nsg_key = "db_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      }  

      # websubnet, service_subnet, chatgptsubnet, aisubnet,  applicaitongatewaysubnet

{% if internet_app_app_service | trim == '1' %}
      # delegated subnet app service vnet injection
      web_internet_subnet = {
        name    = "web-internet"
        cidr    = ["100.2.0.64/27"]
        nsg_key = "web_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        delegation = {
          name               = "webapp"
          service_delegation = "Microsoft.Web/serverFarms"
          actions            = ["Microsoft.Network/virtualNetworks/subnets/action"]
        }          
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      }  
{% endif %}    

      # always created
      # private endpoint for keyvault, acr etc ...
      service_internet_subnet = {
        name    = "service-internet"
        cidr    = ["100.2.0.96/27"]
        nsg_key = "service_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      } 

{% if internet_app_container_instance | trim == '1' %}
      # chatgpt web
      chatgpt_internet_subnet = {
        name    = "chatgpt-internet"
        cidr    = ["100.2.0.128/27"]
        nsg_key = "chatgpt_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"  
        delegation = {
          name               = "container_groups"
          service_delegation = "Microsoft.ContainerInstance/containerGroups" # Microsoft.Web/serverFarms"
          actions            = ["Microsoft.Network/virtualNetworks/subnets/action"]
        }      
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      } 
{% endif %}    

{% if internet_app_openai | trim == '1' or internet_app_search_service | trim == '1' %}
      # openai and search service private endpoint
      ai_internet_subnet = {
        name    = "ai-internet"
        cidr    = ["100.2.0.160/27"]
        nsg_key = "ai_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      }   
{% endif %}    

{% if internet_app_agw | trim == '1' %}
      applicaitongateway_internet_subnet = {
        name    = "applicationgateway-internet"
        cidr    = ["100.2.0.192/27"]
        nsg_key = "app_nsg" # "applicationgateway_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      }  
{% endif %}    

{% if internet_app_linux_function_app | trim == '1' %}
      # delegated subnet linux function app
      functionapps_internet_subnet = {
        name    = "function-apps-internet"
        cidr    = ["100.2.0.224/27"]
        nsg_key = "functionapps_nsg"
        service_endpoints = ["Microsoft.KeyVault", "Microsoft.Storage"]
        enforce_private_link_endpoint_network_policies = "true"   
        # TODO: add Delegated function - Delegated to "Microsoft.Web/serverFarms"
        delegation = {
          name               = "functions"
          service_delegation = "Microsoft.Web/serverFarms"
          actions            = ["Microsoft.Network/virtualNetworks/subnets/action"]
        }    
        # vnet = {
        #   id = "/subscriptions/{{subscription_id}}/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet"
        # }
      }
{% endif %}   

      # end private segment
    }

  }
  
} 
# vnets
{% endif %}